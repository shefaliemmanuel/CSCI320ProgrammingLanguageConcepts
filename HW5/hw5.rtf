{\rtf1\ansi\ansicpg1252\cocoartf1671
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww16560\viewh16580\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 %Shefali Emmanuel\
\
%remove duplicate\
%base case\
remDup([],[]). \
        %capital letter == variable\
remDup([Head | Tail], NewList):-\
    member(Head, Tail),\
    remDup(Tail, NewList).\
remDup([Head | Tail], [Head | NewList]):-\
    \\+member(Head, Tail),\
    remDup(Tail, NewList).\
    \
%1\
%input lists are sets \
% output should be a set\
intersect(List1, List2, IntList):-\
    remDup(List1, NewList1),\
    remDup(List2, NewList2),\
    setIntersect(NewList1, NewList2, IntList).\
\
%setIntersect(_NewList1, _NewList2, _IntList).\
setIntersect([], _, []).\
    %if an element of list1 is in list2\
    setIntersect([Head | Tail], NewList2, [Head | IntList]):-\
    	member(Head, NewList2),\
    	setIntersect(Tail, NewList2, IntList).\
						%add it to IntList\
	setIntersect([Head | Tail], NewList2, IntList):-\
    	\\+member(Head, Tail),\
    	setIntersect(Tail, NewList2, IntList).\
\
\
%2\
union(List1, List2, IntList):-\
    remDup(List1, NewList1),\
    remDup(List2, NewList2),\
    setUnion(NewList1, NewList2, S),\
	remDup(S, IntList).\
\
%if list1 is empty return list2 and IntList\
			%once list1 is empty then set IntList to List2	\
\
setUnion(S,[],S).\
    %if the head of list2 is in list2 keep going and recursively call\
setUnion([],S,S).\
%%if list2 is empty return list1 and IntList\
    %setUnion(NewList1,[Head | Tail], IntList):-\
    	%member(Head, NewList1),\
    	%setUnion(NewList1, Tail, IntList).\
	%if the head of list1 is in list2 keep going and recursively call\
    setUnion([Head | Tail], NewList2, IntList):-\
    	member(Head, NewList2),\
    	setUnion(Tail, NewList2, IntList).\
	%if the head of list1 is not in list2 then add head to IntList\
	setUnion([Head | Tail], NewList2, [Head | IntList]):-\
    	\\+member(Head, NewList2),\
    	setUnion(Tail, NewList2, IntList).\
	%if the head of list2 is not in list1 then add head to IntList\
	%setUnion(NewList1,[Head | Tail], [Head | IntList]):-\
    	%\\+member(Head, NewList1),\
    	%setUnion(NewList1, Tail, IntList).\
\
%3\
times(_,[],_).\
    %get the tail of every element in L1\
    times(N, [S | E], [NewHead | L2]):-\
    	times2(N, S, NewHead),\
    	times(N, E, L2).\
    	times2(N, [Word | Num],[Word | NewNum]):- NewNum is Num * N.\
\
%4\
\
%chop the list up\
	chopper([],[],[]). %list has 0 elements\
	chopper([S],[S],[]). %list has 1 element\
	chopper([S,E|Tail], [S|TailS], [E|TailE]):- %list has 1+ elements\
    	chopper(Tail,TailS,TailE).\
    \
%merge the lists\
	merge([],[],[]).\
	merge(MP1,[],MP1).\
	merge([],MP2,MP2).\
	merge([First|TailF], [Second|TailS], [First|Rest]):-\
    	First =< Second, merge(TailF, [Second|TailS], Rest).\
	merge([First|TailF], [Second|TailS], [Second|Rest]):-\
    	First > Second, merge([First|TailF], TailS, Rest).\
\
%call mergesort\
mergeSort([],[]). %empty list\
mergeSort([A],[A]).\
mergeSort(List, MSorted):-\
    chopper(List, Part1, Part2),\
    mergeSort(Part1, Sorted1),\
    mergeSort(Part2, Sorted2),\
    merge(Sorted1,Sorted2,MSorted).}